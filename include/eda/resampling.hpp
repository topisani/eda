#pragma once

#include <eda/block.hpp>
#include <eda/evaluator.hpp>

namespace eda {
  /// Halfband FIR filter
  /// Koefficients from: https://www.dsprelated.com/showcode/270.php
  constexpr FIRFilter halfband_firwin = fir(std::array<float, 33>({
    0.000000f,  -0.001888f, 0.000000f, 0.003862f, 0.000000f,  -0.008242f, 0.000000f, 0.015947f, 0.000000f,
    -0.028677f, 0.000000f,  0.050719f, 0.000000f, -0.098016f, 0.000000f,  0.315942f, 0.500706f, 0.315942f,
    0.000000f,  -0.098016f, 0.000000f, 0.050719f, 0.000000f,  -0.028677f, 0.000000f, 0.015947f, 0.000000f,
    -0.008242f, 0.000000f,  0.003862f, 0.000000f, -0.001888f, 0.000000f,
  }));

  /// Halfband FIR filter
  /// Koefficients from: https://www.dsprelated.com/showcode/270.php
  constexpr FIRFilter halfband_remez = fir(std::array<float, 33>({
    0.000000, -0.010233, 0.000000,  0.010668, 0.000000, -0.016324, 0.000000, 0.024377, 0.000000,  -0.036482, 0.000000,
    0.056990, 0.000000,  -0.101993, 0.000000, 0.316926, 0.500009,  0.316926, 0.000000, -0.101993, 0.000000,  0.056990,
    0.000000, -0.036482, 0.000000,  0.024377, 0.000000, -0.016324, 0.000000, 0.010668, 0.000000,  -0.010233, 0.000000,
  }));

  /// Halfband FIR filter
  /// Generated using https://fiiir.com/, cutoff=0.25, transition_width=0.036
  constexpr FIRFilter halfband = fir(std::array<float, 129>({
    0.000000000000000000,  -0.000001096652327330, 0.000000000000000000,  0.000010264031516365,  0.000000000000000000,
    -0.000029878338799022, 0.000000000000000000,  0.000061812383505534,  0.000000000000000000,  -0.000108554065763228,
    0.000000000000000001,  0.000173253086175895,  0.000000000000000001,  -0.000259759365306352, 0.000000000000000000,
    0.000372654783774880,  -0.000000000000000001, -0.000517281125462213, 0.000000000000000004,  0.000699768686890352,
    -0.000000000000000008, -0.000927072025890890, -0.000000000000000001, 0.001207021956794792,  -0.000000000000000003,
    -0.001548406472520901, 0.000000000000000010,  0.001961098299574166,  -0.000000000000000005, -0.002456254118009391,
    -0.000000000000000004, 0.003046621529754296,  -0.000000000000000007, -0.003747007082591159, 0.000000000000000022,
    0.004574986367556928,  -0.000000000000000009, -0.005551983242189756, -0.000000000000000012, 0.006704924332065411,
    -0.000000000000000011, -0.008068815973284071, 0.000000000000000043,  0.009690852742197094,  -0.000000000000000013,
    -0.011637177123532653, 0.000000000000000014,  0.014004461065005920,  -0.000000000000000015, -0.016940793321255140,
    0.000000000000000016,  0.020685873179831588,  -0.000000000000000017, -0.025655056087168296, 0.000000000000000018,
    0.032635432666058138,  -0.000000000000000018, -0.043317966947979292, 0.000000000000000019,  0.062106605722622214,
    -0.000000000000000019, -0.105163476837881006, 0.000000000000000019,  0.317995216086781440,  0.499999463719711212,
    0.317995216086781440,  0.000000000000000019,  -0.105163476837881006, -0.000000000000000019, 0.062106605722622214,
    0.000000000000000019,  -0.043317966947979292, -0.000000000000000018, 0.032635432666058145,  0.000000000000000018,
    -0.025655056087168299, -0.000000000000000017, 0.020685873179831591,  0.000000000000000016,  -0.016940793321255140,
    -0.000000000000000015, 0.014004461065005927,  0.000000000000000014,  -0.011637177123532651, -0.000000000000000013,
    0.009690852742197097,  0.000000000000000043,  -0.008068815973284077, -0.000000000000000011, 0.006704924332065411,
    -0.000000000000000012, -0.005551983242189757, -0.000000000000000009, 0.004574986367556932,  0.000000000000000022,
    -0.003747007082591159, -0.000000000000000007, 0.003046621529754298,  -0.000000000000000004, -0.002456254118009391,
    -0.000000000000000005, 0.001961098299574167,  0.000000000000000010,  -0.001548406472520902, -0.000000000000000003,
    0.001207021956794792,  -0.000000000000000001, -0.000927072025890891, -0.000000000000000008, 0.000699768686890354,
    0.000000000000000004,  -0.000517281125462214, -0.000000000000000001, 0.000372654783774880,  0.000000000000000000,
    -0.000259759365306352, 0.000000000000000001,  0.000173253086175895,  0.000000000000000001,  -0.000108554065763229,
    0.000000000000000000,  0.000061812383505534,  0.000000000000000000,  -0.000029878338799022, 0.000000000000000000,
    0.000010264031516366,  0.000000000000000000,  -0.000001096652327330, 0.000000000000000000,
  }));
  /// Quarterband filter.
  /// Generated using https://fiiir.com/, cutoff=0.12, transition_width=0.036
  constexpr FIRFilter quarterband = fir(std::array<float, 129>({
    0.000000000000000000f,  -0.000000403706986821f, 0.000001645142951079f,  0.000009287227200311f,
    0.000017748792717623f,  0.000014394082902256f,  -0.000010983429301009f, -0.000052190223963627f,
    -0.000081679045780782f, -0.000063806848675238f, 0.000017350619151396f,  0.000133494570814806f,
    0.000213091361905980f,  0.000177818552168181f,  0.000000000000000000f,  -0.000255101231985400f,
    -0.000439770342813020f, -0.000398574267035395f, -0.000075623680817821f, 0.000411316097634436f,
    0.000793054468436844f,  0.000782757336275945f,  0.000263598027493080f,  -0.000581490631986405f,
    -0.001302427309861704f, -0.001401048183241174f, -0.000642445391832465f, 0.000721932617703368f,
    0.001988471495815060f,  0.002336050021380179f,  0.001319370107673039f,  -0.000757668354949370f,
    -0.002855566446823656f, -0.003680658614028739f, -0.002435687247284503f, 0.000573401157661301f,
    0.003885973714967376f,  0.005541059780416179f,  0.004178842640528388f,  -0.000000000000000005f,
    -0.005036858234420859f, -0.008052940672693755f, -0.006814444055578153f, -0.001214592948408780f,
    0.006241337461434024f,  0.011431116963112014f,  0.010774099480407723f,  0.003482788023864352f,
    -0.007413913675861475f, -0.016111745242543350f, -0.016913011553121866f, -0.007615021938185520f,
    0.008459775456166383f,  0.023213523296217339f,  0.027409555468429988f,  0.015722330699376171f,
    -0.009286636321546431f, -0.036574781110998981f, -0.050287637072574352f, -0.036505558453421044f,
    0.009817191016539564f,  0.081030321108466738f,  0.158215036493354722f,  0.217683966290383085f,
    0.240001133326345484f,  0.217683966290383085f,  0.158215036493354722f,  0.081030321108466738f,
    0.009817191016539566f,  -0.036505558453421044f, -0.050287637072574359f, -0.036574781110998981f,
    -0.009286636321546431f, 0.015722330699376171f,  0.027409555468429991f,  0.023213523296217339f,
    0.008459775456166385f,  -0.007615021938185520f, -0.016913011553121870f, -0.016111745242543350f,
    -0.007413913675861476f, 0.003482788023864353f,  0.010774099480407730f,  0.011431116963112012f,
    0.006241337461434024f,  -0.001214592948408781f, -0.006814444055578153f, -0.008052940672693758f,
    -0.005036858234420864f, -0.000000000000000005f, 0.004178842640528388f,  0.005541059780416181f,
    0.003885973714967378f,  0.000573401157661302f,  -0.002435687247284503f, -0.003680658614028739f,
    -0.002855566446823658f, -0.000757668354949370f, 0.001319370107673040f,  0.002336050021380179f,
    0.001988471495815060f,  0.000721932617703369f,  -0.000642445391832466f, -0.001401048183241175f,
    -0.001302427309861704f, -0.000581490631986405f, 0.000263598027493080f,  0.000782757336275945f,
    0.000793054468436845f,  0.000411316097634437f,  -0.000075623680817821f, -0.000398574267035395f,
    -0.000439770342813020f, -0.000255101231985400f, 0.000000000000000000f,  0.000177818552168181f,
    0.000213091361905980f,  0.000133494570814806f,  0.000017350619151396f,  -0.000063806848675238f,
    -0.000081679045780782f, -0.000052190223963627f, -0.000010983429301009f, 0.000014394082902255f,
    0.000017748792717623f,  0.000009287227200311f,  0.000001645142951079f,  -0.000000403706986821f,
    0.000000000000000000f,
  }));

  template<std::size_t N>
  requires(N == 2) auto resample_filter()
  {
    return halfband;
  }

  template<std::size_t N>
  requires(N == 4) auto resample_filter()
  {
    return quarterband;
  }

  // RESAMPLE //////////////////////////////////////////

  template<int N, AnyBlock Block>
  requires(N > 1) || (N < -1) //
  struct Resample : CompositionBase<Resample<N, Block>, 1, 1, Block> {};

  template<int N>
  constexpr auto resample(AnyBlock auto block, AnyBlock auto f1, AnyBlock auto f2)
  {
    auto filter_block = seq(f1, block, f2);
    return Resample<N, decltype(filter_block)>{{filter_block}};
  }

  template<int N>
  constexpr auto resample(AnyBlock auto block)
  {
    return resample<N>(block, resample_filter<N>(), resample_filter<N>());
  }

  template<int N, AnyBlock Block>
  struct evaluator<Resample<N, Block>> : EvaluatorBase<Resample<N, Block>> {
    static_assert(N > 1, "Resampling not implemented for downsampling first");

    constexpr evaluator(const Resample<N, Block>& resample) noexcept : EvaluatorBase<Resample<N, Block>>(resample) {}

    constexpr Frame<outs<Block>> eval(Frame<ins<Block>> in)
    {
      // Zero stuffing reduces amplitude by N
      for (float& f : in) {
        f *= N;
      }
      Frame<outs<Block>> res = std::get<0>(this->operands).eval(in);
      for (int i = 1; i < N; i++) {
        std::get<0>(this->operands).eval({});
      }
      return res;
    }
  };

} // namespace eda
